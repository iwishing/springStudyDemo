<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--
spring中的依赖注入
    IoC的作用：
        降低程序间的耦合（依赖关系）
    依赖注入（Dependency Injection）：
        依赖关系的管理，以后都交给spring来维护，在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明，依赖关系的维护，就称为依赖注入
        能注入的数据，有三类：
            基本类型和String
            其他bean类型（在配置文件中或者注解配置过的bean）
            复杂类型/集合类型
        注入的方式，有三种：
         //如果是经常变化的数据，并不适用于注入的方式
            第一种 构造函数注入：
                使用的标签：constructor-arg
                标签出现的位置：bean标签内部
                标签中的属性
                    type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                    index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始的
                    name：用于指定给构造函数中指定名称的参数赋值（最常用）
                    ============================以上三个用于指定给构造函数中哪个参数赋值================================
                    value：用于提供基本类型和String类型的数据
                    ref：用于指定其他的bean类型数据，它指的就是在spring的IoC核心容器中出现的bean对象
                优势：
                    在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功，即当我们需要某个类的实例对象一定拥有值的时候，就可以用这种方式注入
                弊端：
                    改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
                例子：
                    <bean id="accountService" class="com.cbw.service.impl.AccountServiceImpl">
                        <constructor-arg name="name" value="test"></constructor-arg>
                        <constructor-arg name="age" value="18"></constructor-arg>
                        这个date对象，spring无法用字符串转换，所以要创建一个date类型的bean对象， 再用ref属性引用
                        <constructor-arg name="birthday" ref="birthday"></constructor-arg>
                    </bean>
                    创建一个date类型bean供birthday使用
                    <bean id="birthday" class="java.util.Date"></bean>

            第二种：使用set方法提供（常用）
                使用的标签：property
                标签出现的位置：bean标签内部
                标签中的属性
                    name：用于指定注入时所调用的set方法名称
                    value：用于提供基本类型和String类型的数据
                    ref：用于指定其他的bean类型数据，它指的就是在spring的IoC核心容器中出现的bean对象
                优势：
                    创建对象时没有明确的限制，可以直接使用默认构造函数，即使用无参构造函数都行
                弊端：
                    如果有某个成员必须有值，则获取对象是有可能set方法没有执行，即可能调用的默认构造函数创建对象，然后用完了都没有调用set方法，也就没有值
                例子：
                    <bean id="accountServic" class="com.cbw.service.impl.AccountServiceImpl2">
                        <property name="name" value="cbw"></property>
                        <property name="age" value="23"></property>
                       <property name="birthday" ref="birthday"></property>
                    </bean>
                    <bean id="birthday" class="java.util.Date"></bean>

             复杂类型的注入/集合类型的注入（使用前两种方法中的一种，这里我们使用set方法注入）
                用于给List结构集合注入的标签：
                    list array set
                用于给Map结构集合注入的标签：
                    map props
                结构相同，标签可以互换，也就是能共用标签,当然只能使用一种
                例子：
                     <bean id="accountService" class="com.cbw.service.impl.AccountServiceImpl3">
                        //字符串数组
                        <property name="myStrs">
                             <array>
                                 <value>sss</value>
                                 <value>fff</value>
                                 <value>ddd</value>
                             </array>
                        </property>
                        //List
                        <property name="myList">
                            <list>
                                <value>123</value>
                                <value>234</value>
                                <value>345</value>
                            </list>
                        </property>
                        //Map
                        <property name="myMap">
                            //想使用自定义bean，用key-ref="***" value-ref="***"属性连接外部bean
                            <map key-type="java.lang.String" value-type="java.lang.String">
                                //用value属性传值
                                <entry key="墨菲特" value="势不可挡" ></entry>
                                <entry key="亚托克斯" value="大灭"></entry>
                                //用value标签传值
                                <entry key="亚索">
                                    <value>狂风绝息斩</value>
                                </entry>
                            </map>
                        </property>
                        //Set
                        <property name="mySet">
                            <set>
                                <value>set1</value>
                                <value>set2</value>
                                <value>set3</value>
                            </set>
                        </property>
                        //Properties
                        <property name="myProperties">
                            <props>
                                <prop key="accountService1">唉唉唉</prop>
                                <prop key="accountService2">哈哈哈</prop>
                                <prop key="accountService3">嘻嘻嘻</prop>
                            </props>
                        </property>
                     </bean>
                //用key-ref="***" value-ref="***"属性连接外部bean
                <bean id="now" class="java.util.Date"></bean>//自定义date对象
                <bean id="accountService" class="com.cbw.service.impl.AccountServiceImpl4">
                    <property name="myMap">
                        <map>
                            <entry key-ref="now" value-ref="now"></entry>
                        </map>
                    </property>
                </bean>

            第三种：使用注解提供
-->

</beans>